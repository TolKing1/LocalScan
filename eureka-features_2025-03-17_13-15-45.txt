C:\Projects\local\ice-cream-land# C:\Projects\EPAM\FOLIO\mod-notes\src\main\resources\spitfire\mod-notes\eureka-features\note-links.feature

Feature: Note links

  Background:
    * url baseUrl
    * callonce login testUser

    * def headersUser = { 'Content-Type': 'application/json', 'x-okapi-token': '#(okapitoken)', 'x-okapi-tenant': '#(testTenant)', 'Accept': '*/*'  }
    * def postNoteWithLinksPath = featuresPath + 'setup/setup-test-note.feature@PostNoteWithLinks';

  Scenario Outline: get notes by specific links
    And call read(postNoteWithLinksPath) {domain: <domain>, linkId: <linkId>, typeLink: <typeLink>}

    Given path '/note-links/domain/<domain>/type/<typeLink>/id/<linkId>'
    And headers headersUser
    When method GET
    Then status 200


    Examples:
      | domain    | typeLink | linkId                               |
      | eholdings | resource | 583-2356521-23456                    |
      | users     | user     | 8acab042-ce12-4d8f-bbe5-b1abe41d5d01 |


  Scenario Outline: should delete note when no link assigned

    #  create test note
    And call read(postNoteWithLinksPath) {domain: <domain>, linkId: <linkId>, typeLink: <typeLink>}
    And def noteId = $.id

    #  update note link
    Given path '/note-links/type/<typeLink>/id/<linkId>'
    And remove headersUser.Accept
    And headers headersUser
    And request
    """
    {
      notes : [
        {
          id : #(noteId),
          status : UNASSIGNED
        }
      ]
    }
    """
    When method PUT
    Then status 204

    Given path 'notes', noteId
    And headers headersUser
    When method GET
    Then status 404

    Examples:
      | domain    | typeLink | linkId            |
      | eholdings | resource | 583-2356521-23456 |

# C:\Projects\EPAM\FOLIO\mod-notes\src\main\resources\spitfire\mod-notes\eureka-features\note-types.feature

Feature: Note types

  Background:
    * url baseUrl
    * callonce login testUser

    * def headersUser = { 'Content-Type': 'application/json', 'x-okapi-token': '#(okapitoken)', 'x-okapi-tenant': '#(testTenant)', 'Accept': '*/*'  }

    * def noteTypePayload = read(featuresPath + 'samples/note-type.json')
    * def noteTypePayloadPut = read(featuresPath + 'samples/note-type-put.json')

    * def result = call read(featuresPath + 'setup/get-default-note-type.feature')
    * def defaultNoteTypeId = result.defaultNoteType.id

    # ================= positive test cases =================

  Scenario: Get Default note type
    Given path 'note-types'
    And headers headersUser
    When method GET
    Then status 200
    * def defaultNoteTypeName = "General note"
    And match $.noteTypes[*].name == '#(^defaultNoteTypeName)'

  Scenario: Get by query
    Given path 'note-types'
    And param query = 'name==General note'
    And headers headersUser
    When method GET
    Then status 200

    And match $.noteTypes[*].usage.isAssigned == [true]

  Scenario: Post new note type
    Given path 'note-types'
    And headers headersUser
    And request noteTypePayload
    When method POST
    Then status 201
    And match $.id == '#uuid'
    And match $.metadata.createdByUserId == '#uuid'
    And match $.metadata.updatedByUserId == '#uuid'
    And match $.metadata.createdDate == '#present'
    And match $.metadata.updatedDate == '#present'

  Scenario: Get by id
    Given path 'note-types', defaultNoteTypeId
    And headers headersUser
    When method GET
    Then status 200

    And match $.usage.isAssigned == true

  Scenario: Put by id
    # create note type
    Given path 'note-types'
    And headers headersUser
    And request noteTypePayload
    * set noteTypePayload.name = 'note type for put'
    When method POST
    And status 201
    * def noteTypeForPut = response.id

    Given path 'note-types', noteTypeForPut
    And headers headersUser
    And request noteTypePayloadPut
    When method PUT
    Then status 204

    #check note type name updated
    Given path 'note-types', noteTypeForPut
    And headers headersUser
    When method GET
    Then status 200
    And match $.name == noteTypePayloadPut.name

  Scenario: Delete by id
    # create note type
    Given path 'note-types'
    And headers headersUser
    And request noteTypePayload
     * set noteTypePayload.name = 'note type for delete'
    When method POST
    And status 201
    * def noteTypeForDelete = response.id

    Given path 'note-types', noteTypeForDelete
    And headers headersUser
    When method DELETE
    Then status 204

    # check note type was deleted
    Given path 'note-types', noteTypeForDelete
    And headers headersUser
    When method GET
    Then status 404
    And match response.errors[0].message contains 'Note type with ID'
    And match response.errors[0].message contains 'was not found'

  Scenario: check limit config for note-types

#    get existing note types number
    Given path 'note-types'
    And headers headersUser
    When method GET
    Then status 200
    * def existingNoteTypeAmount = response.totalRecords

#    set note types limit
    Given path 'configurations/entries'
    And headers headersUser
    And request
    """
     {
        module: NOTES,
        configName: note-type-limit,
        code: note.types.number.limit,
        value: #(existingNoteTypeAmount)
      }
    """
    When method POST
    Then status 201
    * def configId = response.id

#    check note-types limit works
    Given path 'note-types'
    And headers headersUser
    And request
    """
    {
       name: above the limit
    }
    """
    When method POST
    Then status 422
    And match response.errors[0].message == 'Maximum number of note types allowed is ' + existingNoteTypeAmount

#    delete note-type limit
    Given path 'configurations/entries', configId
    And headers headersUser
    When method DELETE
    Then status 204

#  check config deleted
    Given path '/configurations/entries'
    And param query = '(module==NOTES and code==note.types.number.limit)'
    And headers headersUser
    When method GET
    Then status 200

#  check note type created after limit deleted
    Given path 'note-types'
    And headers headersUser
    And request
    """
    {
       name: after config deleted
    }
    """
    When method POST
    Then status 201


    # ================= negative test cases =================

  Scenario Outline: Get note types collection - invalid limit
    Given path 'note-types'
    And param <paramName> = <value>
    And headers headersUser
    When method GET
    Then status 422

    Examples:
      | paramName | value       |
      | limit     | -1          |
      | limit     | -2147483649 |
      | limit     | 2147483648  |
      | offset    | -1          |
      | offset    | -2147483649 |
      | offset    | 2147483648  |

  Scenario: Get note types collection - empty query
    Given path 'note-types'
    And param query = ''
    And headers headersUser
    When method GET
    Then status 200

  Scenario: Post already existing note type
    Given path 'note-types'
    And headers headersUser
    And request noteTypePayload
    When method POST
    Then status 422
    And match response.errors[0].message contains 'Key (name)=(Test note type) already exists'

  Scenario: Post note type - empty JSON
    Given path 'note-types'
    And headers headersUser
    And request
    """
    {}
    """
    When method POST
    Then status 422

  Scenario: Post note type - invalid body
    Given path 'note-types'
    And headers headersUser
    And request
    """
    {
      type: Low Priority,
      title: BU Campus Access Issues,
      content: There have been access issues at the BU campus since the weekend,
      typeId: invalid_id
    }
    """
    When method POST
    Then status 422

  Scenario: Post note type - empty body
    Given path 'note-types'
    And headers headersUser
    And request ''
    When method POST
    Then status 422

  Scenario: Post note type - invalid body
    Given path 'note-types'
    And headers headersUser
    And request '{"name" : "Bad Json}'
    When method POST
    Then status 422

  Scenario: Post note type - wrong content-type
    Given path 'note-types'
    And headers headersUser
    And header Content-Type = 'application/xml'
    And request noteTypePayload
    When method POST
    Then status 415
    And match response.error contains 'Unsupported Media Type'

  Scenario: Put by id - invalid id format
    Given path 'note-types', 12345
    And headers headersUser
    And request noteTypePayloadPut
    When method PUT
    Then status 422
    And match response.errors[0].message contains "Failed to convert value of type 'java.lang.String' to required type 'java.util.UUID'"

  Scenario: Put by id - not existing id
    * def randomId = call uuid
    Given path 'note-types', randomId
    And headers headersUser
    And request noteTypePayloadPut
    When method PUT
    Then status 404
    And match response.errors[0].message contains 'Note type with ID'
    And match response.errors[0].message contains 'was not found'

  Scenario: Delete by id - invalid id type
    Given path 'note-types', 12345
    And headers headersUser
    When method DELETE
    Then status 422
    And match response.errors[0].message contains "Failed to convert value of type 'java.lang.String' to required type 'java.util.UUID'"

# C:\Projects\EPAM\FOLIO\mod-notes\src\main\resources\spitfire\mod-notes\eureka-features\notes.feature

Feature: Notes

  Background:
    * url baseUrl
    * callonce login testUser

    * def headersUser = { 'Content-Type': 'application/json', 'x-okapi-token': '#(okapitoken)', 'x-okapi-tenant': '#(testTenant)', 'Accept': 'application/json' }

    * def result = call read(featuresPath + 'setup/get-default-note-type.feature')
    * def defaultNoteTypeId = result.defaultNoteType.id

    * def note = call read(featuresPath + 'setup/setup-test-note.feature@PostNote')

    # ================= positive test cases =================

  Scenario Outline: Get Notes collection
    Given path 'notes'
    And param <paramName> = <value>
    And headers headersUser
    When method GET
    Then status 200

    Examples:
      | paramName | value               |
      | id        | note.testNote.id    |
      | title     | note.testNote.title |
      | limit     | 1                   |
      | offset    | 1                   |
      | offset    | 0                   |

  Scenario: Post create new note
    * match note.testNote.id == '#uuid'

  Scenario: Put note by id
    Given path 'notes', note.testNote.id
    And remove headersUser.Accept
    And headers headersUser
    And request read(featuresPath + "samples/note-put.json")
    When method PUT
    Then status 204

    Given path 'notes', note.testNote.id
    And headers headersUser
    When method GET
    Then status 200
    And match $.title == 'Updated title'


    # ================= negative test cases =================

  Scenario Outline: Get Notes collection
    Given path 'notes'
    And param <paramName> = <value>
    And headers headersUser
    When method GET
    Then status 422
    And match $.errors[0].code == 'VALIDATION_ERROR'

    Examples:
      | paramName | value       |
      | limit     | 0           |
      | limit     | -1          |
      | limit     | -2147483649 |
      | limit     | 2147483648  |
      | offset    | -1          |
      | offset    | -2147483649 |
      | offset    | 2147483648  |
      | query     | 'foo*'      |

  Scenario: Post create note - empty body
    Given path 'notes'
    And headers headersUser
    And request ''
    When method POST
    Then status 422
    And match $.errors[0].code == 'VALIDATION_ERROR'
    And match $.errors[0].message contains 'Required request body is missing:'

  Scenario: Post create note - empty JSON
    Given path 'notes'
    And headers headersUser
    And request
    """
    {}
    """
    When method POST
    Then status 422
    And match $.errors[0].code == 'VALIDATION_ERROR'
    And match $.errors[0].message contains 'Validation failed for argument [0]'







# C:\Projects\EPAM\FOLIO\mod-notes\src\main\resources\spitfire\mod-notes\eureka-features\samples\note-links.json

{
  "links": [
    {
      "id": "#(linkId)",
      "type": "#(typeLink)"
    }
  ]
}

# C:\Projects\EPAM\FOLIO\mod-notes\src\main\resources\spitfire\mod-notes\eureka-features\samples\note-put.json

{
  "type": "Low Priority",
  "title": "Updated title",
  "content": "Updated content",
  "typeId": "#(defaultNoteTypeId)",
  "domain": "Updated domain",
  "links": [
    {
      "id": "583-2356521",
      "type": "package"
    }
  ]
}

# C:\Projects\EPAM\FOLIO\mod-notes\src\main\resources\spitfire\mod-notes\eureka-features\samples\note-type-put.json

{
  "name": "Test - Updated"
}

# C:\Projects\EPAM\FOLIO\mod-notes\src\main\resources\spitfire\mod-notes\eureka-features\samples\note-type.json

{
  "name": "Test note type"
}

# C:\Projects\EPAM\FOLIO\mod-notes\src\main\resources\spitfire\mod-notes\eureka-features\samples\note.json

{
  "type": "Low Priority",
  "title": "BU Campus Access Issues",
  "content": "There have been access issues at the BU campus since the weekend",
  "typeId": "#(defaultNoteTypeId)",
  "domain": "eholdings",
  "links": [
    {
      "id": "583-2356521",
      "type": "package"
    }
  ]
}

# C:\Projects\EPAM\FOLIO\mod-notes\src\main\resources\spitfire\mod-notes\eureka-features\setup\get-default-note-type.feature

Feature: Get Default note type
  Background:
    * url baseUrl
    * callonce login testUser

    * def headersUser = { 'Content-Type': 'application/json', 'x-okapi-token': '#(okapitoken)', 'x-okapi-tenant': '#(testTenant)', 'Accept': 'application/json'  }

  Scenario: Get Default note type
    Given path '/note-types'
    And headers headersUser
    When method GET
    Then status 200
    * def defaultNoteType = get[0] $.noteTypes[?(@.name=='General note')]
    And match defaultNoteType.id == '#uuid'
    And match defaultNoteType.metadata.createdByUsername == '#notpresent'
    And match defaultNoteType.metadata.createdByUserId == '#notpresent'
    And match defaultNoteType.metadata.updatedByUserId == '#notpresent'
    And match defaultNoteType.metadata.createdDate == '#present'


# C:\Projects\EPAM\FOLIO\mod-notes\src\main\resources\spitfire\mod-notes\eureka-features\setup\setup-test-note-type.feature

Feature: Setup mod-notes

  Background:
    * url baseUrl
    * callonce login testUser

    * def headersUser = { 'Content-Type': 'application/json', 'x-okapi-token': '#(okapitoken)', 'x-okapi-tenant': '#(testTenant)', 'Accept': 'application/json'  }
    * def noteTypePayload = read(featuresPath + 'samples/note-type.json')

  Scenario: Post new note type
    Given path '/note-types'
    And headers headersUser
    * def testNoteTypeName = noteTypePayload.name + '1'
    * set noteTypePayload.name = testNoteTypeName
    And request noteTypePayload
    When method POST
    Then status 201
    * def testNoteType = $

# C:\Projects\EPAM\FOLIO\mod-notes\src\main\resources\spitfire\mod-notes\eureka-features\setup\setup-test-note.feature

Feature: Setup mod-notes

  Background:
    * url baseUrl
    * callonce login testUser

    * def headersUser = { 'Content-Type': 'application/json', 'x-okapi-token': '#(okapitoken)', 'x-okapi-tenant': '#(testTenant)', 'Accept': 'application/json'  }

    * def result = call read(featuresPath + 'setup/get-default-note-type.feature')
    * def defaultNoteTypeId = result.defaultNoteType.id

  @PostNote
  Scenario: Post new note
    Given path '/notes'
    And headers headersUser
    And request read(featuresPath + "samples/note-put.json")
    When method POST
    Then status 201
    * def testNote = $

  @PostNoteWithLinks
  Scenario: Post new note with links
    * def note = read(featuresPath + "samples/note-put.json")
    * def linksJson = read(featuresPath + "samples/note-links.json")
    * set note.links = linksJson.links
    * set note.domain = '#(domain)'

    Given path '/notes'
    And headers headersUser
    And request note
    When method POST
    Then status 201

